 int lowerBound(vector<int>&nums, int target)
    {
        int ans=-1;
        int low=0;
        int high=nums.size()-1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(nums[mid]==target)
            {
                ans=mid;
                high=mid-1;
            }

            else if(nums[mid]>target)
            {
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return ans;
    }

    int upperBound(vector<int>&nums, int target)
    {
        int ans=-1;
        int low=0;
        int high=nums.size()-1;
        while(low<=high)
        {
            int mid=(low+high)/2;
            if(nums[mid]==target)
            {
                ans=mid;
                low=mid+1;
            }

            else if(nums[mid]>target)
            {
                high=mid-1;
            }
            else{
                low=mid+1;
            }
        }
        return ans;

    }
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int>ans;
        int lower=lowerBound(nums,target);
        int higher=upperBound(nums,target);

        ans.push_back(lower);
        ans.push_back(higher);

        return ans;
    }
